SELECT POSTS.USER_ID FROM 
COMMENTS  LEFT JOIN POSTS 
on COMMENTS.POST_ID=5 AND COMMENTS.COMMENTER_USER_ID  = POSTS.USER_ID;



Query1

INSERT INTO USERS (NAME, GENDER, DATE_OF_BIRTH) VALUES ("HMM", "F", "2012-12-12"), ("MEMM", "F", "2012-12-12"), ("WATER", "F", "2012-12-12");
INSERT INTO COMMENTS (POST_ID, COMMENTER_USER_ID, TEXT) VALUES (5, 101, "RIMBOLA"), (5, 102, "BEWD");


SELECT DISTINCT USERS.USER_ID, USERS.NAME FROM
(SELECT candidates.COMMENTER_USER_ID  FROM 
(SELECT COMMENTER_USER_ID  from COMMENTS WHERE POST_ID=5) candidates 
LEFT JOIN POSTS ON candidates.COMMENTER_USER_ID  = POSTS.USER_ID
WHERE POSTS.USER_ID is null) first
JOIN
USERS
WHERE USERS.USER_ID=first.COMMENTER_USER_ID;

Explanation:

candidates subquery, selects all users who have commented on post with POSTS_ID=5
first subquery selects all users from candidates, who have not made any POSTS
and finally outer select, collects the id and name of the user




Query2

INSERT INTO FRIENDSHIPS (USER_ID, FRIEND_ID) VALUES (1,169);
INSERT INTO FRIENDSHIPS (USER_ID, FRIEND_ID) VALUES (1,85);
INSERT INTO FRIENDSHIPS (USER_ID, FRIEND_ID) VALUES (1,778);
INSERT INTO FRIENDSHIPS (USER_ID, FRIEND_ID) VALUES (1,968);


SELECT DISTINCT first.FRIEND_ID AS USER_ID FROM
(SELECT candidates.FRIEND_ID FROM
(SELECT FRIEND_ID FROM FRIENDSHIPS WHERE USER_ID=1) candidates
JOIN USERS
ON 
candidates.FRIEND_ID=USERS.USER_ID AND USERS.GENDER='F') first
JOIN
(SELECT FRIEND_ID FROM FRIENDSHIPS WHERE USER_ID=2) second
ON first.FRIEND_ID=second.FRIEND_ID;

Explanation:
candidates subquery selects user id,  who are firends of user with id=1
first subquery selects all the female users from candidates subquery
second subquery selects all the user id, who are friends of user with id=2
finally outer select and join selects all the female friends of user with id =1 who are 
also friends of user with id =2




Query3

INSERT INTO USERS (NAME, GENDER, DATE_OF_BIRTH) VALUES ("RBD", "F", "2012-12-12"), ("DM", "F", "2012-12-12"), ("WATAPONG", "F", "2012-12-12");
INSERT INTO FRIENDSHIPS (USER_ID, FRIEND_ID) VALUES (104, 105), (104, 106);
INSERT INTO POSTS (USER_ID, TEXT) VALUES (105, "DA");

INSERT INTO FRIENDSHIPS (USER_ID, FRIEND_ID) VALUES (104, 105), (104, 106);



INSERT INTO FRIENDSHIPS (USER_ID, FRIEND_ID) VALUES (104, 1);




SELECT candidates.USER_ID FROM
(SELECT FRIENDSHIPS.USER_ID, FRIENDSHIPS.FRIEND_ID FROM
FRIENDSHIPS JOIN POSTS
ON FRIENDSHIPS.FRIEND_ID = POSTS.USER_ID
GROUP BY FRIENDSHIPS.USER_ID, FRIENDSHIPS.FRIEND_ID) candidates
GROUP BY candidates.USER_ID
HAVING COUNT(DISTINCT candidates.FRIEND_ID)>2;


Explanation:
candidates subquery selects all user ids, who are


Query4

SELECT 	DISTINCT candidates.FUSER_ID, COUNT(FRIENDSHIPS.FRIEND_ID) AS COUNT FROM
(SELECT DISTINCT femaleusers.USER_ID as FUSER_ID FROM
(SELECT USER_ID FROM USERS WHERE USERS.gender='F' AND USERS.date_of_birth>'19901220') femaleusers
JOIN
(SELECT COMMENTER_USER_ID FROM COMMENTS JOIN POSTS WHERE POSTS.USER_ID=10 AND COMMENTS.POST_ID=POSTS.POST_ID) comment_users
ON femaleusers.USER_ID = comment_users.COMMENTER_USER_ID) candidates
JOIN FRIENDSHIPS
ON 	candidates.FUSER_ID=FRIENDSHIPS.USER_ID
GROUP BY candidates.FUSER_ID;

Explanation:
femaleusers subquery selects all user ids, who are femal and were born after 1990-12-20 date, 
comment_users subquery selects all user ids, who commented on post, made by user with id=10
candidates subquery selects distinct female users, who have were born aftet the date, and commented on post made 
by user with id=10
finally outer select, selects all the female users, and count of friends of female users, that appeared in candidates 
subquery



Query5

check if post creator is showing up in the answers

INSERT INTO COMMENTS (POST_ID, COMMENTER_USER_ID , text) values (7, 227, "kVOz9jdFapVNqJDht");


SELECT DISTINCT FRIEND_ID AS USER_ID FROM
POSTS JOIN FRIENDSHIPS
ON POSTS.POST_ID=7 AND POSTS.USER_ID=FRIENDSHIPS.USER_ID
JOIN COMMENTS
ON COMMENTS.POST_ID=7 and FRIENDSHIPS.FRIEND_ID=COMMENTS.COMMENTER_USER_ID ;


Explanation:
first join selects all friends of user, who made the post with post id =7
second join selects all the friend ids, who have commented on post, with id = 7
and both joins together will select all friends who commented on post made by users, 
who have posted on post with id=7



Query6

# SELECT U1.USER_ID, U1.NAME, U2.USER_ID, U2.NAME, U3.USER_ID, U3.NAME, (U1.COUNT + U2.COUNT + U3.COUNT) AS COUNT FROM
# (SELECT FRIENDSHIPS.FRIEND_ID AS USER_ID, NAME, UU.COUNT FROM FRIENDSHIPS JOIN
#   (SELECT USER_ID, NAME, COUNT(candidates1.COMMENT_ID) AS COUNT FROM
# (SELECT USER_ID, NAME, COMMENT_ID FROM USERS JOIN COMMENTS WHERE USERS.USER_ID=COMMENTS.COMMENTER_USER_ID AND USERS.GENDER='F'
# AND COMMENTS.POST_ID NOT IN (SELECT POSTS.POST_ID FROM POSTS WHERE POSTS.USER_ID=20 OR POSTS.USER_ID=USERS.USER_ID)) candidates1
# GROUP BY candidates1.USER_ID
# HAVING COUNT(candidates1.COMMENT_ID) > 3) UU
# ON FRIENDSHIPS.USER_ID=20 AND FRIENDSHIPS.FRIEND_ID=UU.USER_ID) U1,
#
# (SELECT FRIENDSHIPS.FRIEND_ID AS USER_ID, NAME, UU.COUNT FROM FRIENDSHIPS JOIN
#   (SELECT USER_ID, NAME, COUNT(candidates1.COMMENT_ID) AS COUNT FROM
# (SELECT USER_ID, NAME, COMMENT_ID FROM USERS JOIN COMMENTS WHERE USERS.USER_ID=COMMENTS.COMMENTER_USER_ID AND USERS.GENDER='F'
# AND COMMENTS.POST_ID NOT IN (SELECT POSTS.POST_ID FROM POSTS WHERE POSTS.USER_ID=20 OR POSTS.USER_ID=USERS.USER_ID)) candidates1
# GROUP BY candidates1.USER_ID
# HAVING COUNT(candidates1.COMMENT_ID) > 3) UU
# ON FRIENDSHIPS.USER_ID=20 AND FRIENDSHIPS.FRIEND_ID=UU.USER_ID) U2,
#
# (SELECT FRIENDSHIPS.FRIEND_ID AS USER_ID, NAME, UU.COUNT FROM FRIENDSHIPS JOIN
#   (SELECT USER_ID, NAME, COUNT(candidates1.COMMENT_ID) AS COUNT FROM
# (SELECT USER_ID, NAME, COMMENT_ID FROM USERS JOIN COMMENTS WHERE USERS.USER_ID=COMMENTS.COMMENTER_USER_ID AND USERS.GENDER='F'
# AND COMMENTS.POST_ID NOT IN (SELECT POSTS.POST_ID FROM POSTS WHERE POSTS.USER_ID=20 OR POSTS.USER_ID=USERS.USER_ID)) candidates1
# GROUP BY candidates1.USER_ID
# HAVING COUNT(candidates1.COMMENT_ID) > 3) UU
# ON FRIENDSHIPS.USER_ID=20 AND FRIENDSHIPS.FRIEND_ID=UU.USER_ID) U3
# WHERE U1.USER_ID!=U2.USER_ID AND U2.USER_ID!=U3.USER_ID AND U3.USER_ID!=U1.USER_ID
# ORDER BY COUNT DESC LIMIT 1;




SELECT * FROM
  (SELECT U2ACCA.UID1, U2ACCA.U1ACC, U2ACCA.UID2, U2ACCA.U2ACC, U2ACCA.UID3, COUNT(COMMENT_ID) AS U3ACC, COUNT AS TOTAL FROM
(SELECT U1ACCA.UID1, U1ACCA.UID2, U1ACCA.UID3, U1ACCA.COUNT, U1ACCA.U1ACC, COUNT(COMMENT_ID) AS U2ACC FROM
(SELECT UID1, UID2, UID3, COUNT, COUNT(COMMENT_ID) AS U1ACC FROM
  (SELECT U1.USER_ID AS UID1, U2.USER_ID AS UID2, U3.USER_ID AS UID3, (U1.COUNT + U2.COUNT + U3.COUNT) AS COUNT FROM
(SELECT FRIENDSHIPS.FRIEND_ID AS USER_ID, NAME, UU.COUNT FROM FRIENDSHIPS JOIN
  (SELECT USER_ID, NAME, COUNT(candidates1.COMMENT_ID) AS COUNT FROM
(SELECT USER_ID, NAME, COMMENT_ID FROM USERS JOIN COMMENTS WHERE USERS.USER_ID=COMMENTS.COMMENTER_USER_ID AND USERS.GENDER='F'
AND COMMENTS.POST_ID NOT IN (SELECT POSTS.POST_ID FROM POSTS WHERE POSTS.USER_ID=20 OR POSTS.USER_ID=USERS.USER_ID)) candidates1
GROUP BY candidates1.USER_ID
HAVING COUNT(candidates1.COMMENT_ID) > 3) UU
ON FRIENDSHIPS.USER_ID=20 AND FRIENDSHIPS.FRIEND_ID=UU.USER_ID) U1,

(SELECT FRIENDSHIPS.FRIEND_ID AS USER_ID, NAME, UU.COUNT FROM FRIENDSHIPS JOIN
  (SELECT USER_ID, NAME, COUNT(candidates1.COMMENT_ID) AS COUNT FROM
(SELECT USER_ID, NAME, COMMENT_ID FROM USERS JOIN COMMENTS WHERE USERS.USER_ID=COMMENTS.COMMENTER_USER_ID AND USERS.GENDER='F'
AND COMMENTS.POST_ID NOT IN (SELECT POSTS.POST_ID FROM POSTS WHERE POSTS.USER_ID=20 OR POSTS.USER_ID=USERS.USER_ID)) candidates1
GROUP BY candidates1.USER_ID
HAVING COUNT(candidates1.COMMENT_ID) > 3) UU
ON FRIENDSHIPS.USER_ID=20 AND FRIENDSHIPS.FRIEND_ID=UU.USER_ID) U2,

(SELECT FRIENDSHIPS.FRIEND_ID AS USER_ID, NAME, UU.COUNT FROM FRIENDSHIPS JOIN
  (SELECT USER_ID, NAME, COUNT(candidates1.COMMENT_ID) AS COUNT FROM
(SELECT USER_ID, NAME, COMMENT_ID FROM USERS JOIN COMMENTS WHERE USERS.USER_ID=COMMENTS.COMMENTER_USER_ID AND USERS.GENDER='F'
AND COMMENTS.POST_ID NOT IN (SELECT POSTS.POST_ID FROM POSTS WHERE POSTS.USER_ID=20 OR POSTS.USER_ID=USERS.USER_ID)) candidates1
GROUP BY candidates1.USER_ID
HAVING COUNT(candidates1.COMMENT_ID) > 3) UU
ON FRIENDSHIPS.USER_ID=20 AND FRIENDSHIPS.FRIEND_ID=UU.USER_ID) U3
WHERE U1.USER_ID!=U2.USER_ID AND U2.USER_ID!=U3.USER_ID AND U3.USER_ID!=U1.USER_ID) triples
JOIN
(SELECT USER_ID AS postuser, COMMENTER_USER_ID AS USER_ID, COMMENTS.COMMENT_ID FROM COMMENTS JOIN POSTS
ON COMMENTS.POST_ID = POSTS.POST_ID) postcomments
WHERE postcomments.USER_ID=UID1 AND postcomments.postuser NOT IN (UID2, UID3)
GROUP BY UID1, UID2, UID3) U1ACCA
JOIN
(SELECT USER_ID AS postuser, COMMENTER_USER_ID AS USER_ID, COMMENTS.COMMENT_ID FROM COMMENTS JOIN POSTS
ON COMMENTS.POST_ID = POSTS.POST_ID) postcomments2
WHERE postcomments2.USER_ID=U1ACCA.UID2 AND postcomments2.postuser NOT IN (U1ACCA.UID1, U1ACCA.UID3)
GROUP BY U1ACCA.UID1, U1ACCA.UID2, U1ACCA.UID3) U2ACCA
JOIN
(SELECT USER_ID AS postuser, COMMENTER_USER_ID AS USER_ID, COMMENTS.COMMENT_ID FROM COMMENTS JOIN POSTS
ON COMMENTS.POST_ID = POSTS.POST_ID) postcomments3
WHERE postcomments3.USER_ID=U2ACCA.UID3 AND postcomments3.postuser NOT IN (U2ACCA.UID1, U2ACCA.UID2)
GROUP BY U2ACCA.UID1, U2ACCA.UID2, U2ACCA.UID3) result
ORDER BY result.U1ACC + result.U2ACC + result.U3ACC
LIMIT 1







